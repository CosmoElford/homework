# Tic Tac Toe
# made by cosmo elford.
# just open alpha version.
# the comments are there to remind me of
# the code so don't worry about them
# even if you're looking at the code. :p

#imports
import random
import sys
import time
import ctypes
#set title
ctypes.windll.kernel32.SetConsoleTitleA(b"Tic Tac Toe by Cosmo Elford - V.2.1")

#game start
def drawBoard(board):
    #board strings 0-9
    print('   |   |')
    print(' ' + board[1] + ' | ' + board[2] + ' | ' + board[3])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[4] + ' | ' + board[5] + ' | ' + board[6])
    print('   |   |')
    print('-----------')
    print('   |   |')
    print(' ' + board[7] + ' | ' + board[8] + ' | ' + board[9])
    print('   |   |')
def inputPlayerLetter():
    letter = ''
    while not (letter == 'X' or letter == 'O'):
        print('Do you want to be X or O?')
        letter = input().upper()
        #define x-o
        if(letter == "X"):
          defineDisplayMessage = "crosses"
          defineLetterMessageL1 = "┐  ┌"
          defineLetterMessageL2 = "└┐┌┘"
          defineLetterMessageL3 = "┌┘└┐"
          defineLetterMessageL4 = "┘  └"
        elif(letter == "O"):
          defineDisplayMessage = "naughts"
          defineLetterMessageL1 = "┌--┐"
          defineLetterMessageL2 = "|  |"
          defineLetterMessageL3 = "|  |"
          defineLetterMessageL4 = "└--┘"
        #message print
        print("\n\n┌-- |    ┌--┐ ┌--- ┌-- ┌--┐    " + defineLetterMessageL1 + " |")
        print("|   ├--┐ |  | └--┐ ├-- |  |    " + defineLetterMessageL2 + " |")
        print("|   |  | |  |    | |   |  |    " + defineLetterMessageL3 + " |")
        print("└-- |  | └--┘ ---┘ └-- |  |    " + defineLetterMessageL4 + " .")
        print("--------------------------------------")
        #message 3 :)
        print("You have chosen " + defineDisplayMessage)
        print("Thanks for playing tic tac toe")
        print("by Cosmo Elford \ 7WMN!\n")
        #message end
        return ['X', 'O']
    else:
        return ['O', 'X']

def whoGoesFirst():
    # random generator
    if random.randint(0, 1) == 0:
        return 'computer'
    else:
        return 'player'
def playAgain():
    # lose you can play again funcation
    print('Do you want to play again? (y/n)')
    return input().lower().startswith('y')
def makeMove(board, letter, move):
    board[move] = letter
def isWinner(bo, le):
    # board for winning combinations. (these are little notes so I can remember what is what...)
    return ((bo[7] == le and bo[8] == le and bo[9] == le) or # across the top
    (bo[4] == le and bo[5] == le and bo[6] == le) or # across the middle
    (bo[1] == le and bo[2] == le and bo[3] == le) or # across the bottom
    (bo[7] == le and bo[4] == le and bo[1] == le) or # down the left side
    (bo[8] == le and bo[5] == le and bo[2] == le) or # down the middle
    (bo[9] == le and bo[6] == le and bo[3] == le) or # down the right side
    (bo[7] == le and bo[5] == le and bo[3] == le) or # diagonal
    (bo[9] == le and bo[5] == le and bo[1] == le)) # diagonal
def getBoardCopy(board):
    # board dupe for lose and retry func.
    dupeBoard = []
    for i in board:
        dupeBoard.append(i)
    return dupeBoard
def isSpaceFree(board, move):
    # check if space is free
    return board[move] == ' '
def getPlayerMove(board):
    # player move
    move = ' '
    while move not in '1 2 3 4 5 6 7 8 9'.split() or not isSpaceFree(board, int(move)):
        print('What is your next move? (1-9)')
        move = input()
    return int(move)
def chooseRandomMoveFromList(board, movesList):
    possibleMoves = []
    for i in movesList:
        if isSpaceFree(board, i):
            possibleMoves.append(i)
    if len(possibleMoves) != 0:
        return random.choice(possibleMoves)
    else:
        return None
def getComputerMove(board, computerLetter):
    # comp letter
    if computerLetter == 'X':
        playerLetter = 'O'
    else:
        playerLetter = 'X'
    # algorithm for computers ai
    for i in range(1, 10):
        copy = getBoardCopy(board)
        if isSpaceFree(copy, i):
            makeMove(copy, computerLetter, i)
            if isWinner(copy, computerLetter):
                return i
    # check if the player could win on his next move.
    for i in range(1, 10):
        copy = getBoardCopy(board)
        if isSpaceFree(copy, i):
            makeMove(copy, playerLetter, i)
            if isWinner(copy, playerLetter):
                return i
    # try take best space avalible
    move = chooseRandomMoveFromList(board, [1, 3, 7, 9])
    if move != None:
        return move
    # try to take center
    if isSpaceFree(board, 5):
        return 5
    # move on one of the sides.
    return chooseRandomMoveFromList(board, [2, 4, 6, 8])
def isBoardFull(board):
    for i in range(1, 10):
        if isSpaceFree(board, i):
            return False
    return True
    #introduction/welcome
print('Welcome to open Alpha PyTicTacToe created by Cosmo Elford.')
print('This is the computer-only version. I worked hard to get')
print('it out for a alpha testing version today.')
print(
  """
Instructions (description not finished yet.):
You will make your move known by entering a number, 1 - 9. The number
will correspond to the board position as illustrated:

     |     |
 (1) | (2) | (3)
     |     |
-----------------
     |     |
 (4) | (5) | (6)
     |     |
-----------------
     |     |
 (7) | (8) | (9)
     |     |

This is layed out like those.. numeric locks, a keypad.
Prepare yourself, the ultimate battle is about to begin.
""")
while True:
    # reset the board.
    theBoard = [' '] * 10
    playerLetter, computerLetter = inputPlayerLetter()
    turn = whoGoesFirst()
    print('The ' + turn + ' will go first.')
    gameIsPlaying = True
    while gameIsPlaying:
        if turn == 'player':
            # Player's turn.
            drawBoard(theBoard)
            move = getPlayerMove(theBoard)
            makeMove(theBoard, playerLetter, move)
            if isWinner(theBoard, playerLetter):
                drawBoard(theBoard)
                #funny message if you win
                print('You won!\nNo, no!  It cannot be! Somehow you tricked me, human.\n But never shall that be again! I, the computer... so swear it!')
                gameIsPlaying = False
            else:
                if isBoardFull(theBoard):
                    drawBoard(theBoard)
                    #funny tie message if you win.
                    print('You tied!\nYou were most lucky, human, and somehow managed to tie me. Celebrate today... for this is the best you will ever achieve!\n')
                    break
                else:
                    turn = 'computer'
        else:
            # comp turn
            move = getComputerMove(theBoard, computerLetter)
            makeMove(theBoard, computerLetter, move)
            if isWinner(theBoard, computerLetter):
                drawBoard(theBoard)
                #funny 'you lost message' if you lose.
                print('You lost!\nAs I predicted, human, I am triumphant once more.\n Proof that computers are superior to humans in all regards.')
                gameIsPlaying = False
            else:
                if isBoardFull(theBoard):
                    drawBoard(theBoard)
                    print('The game is a tie!')
                    break
                else:
                    turn = 'player'
    if not playAgain():
        break
#game end
